#!/usr/bin/env ruby
#
# ceval
#
#
# AUTHOR:  Chris Barrett <chris.d.barrett@me.com>
# LICENSE: BSD
#
# Copyright (C) 2013, Chris Barrett
#
#
# DESCRIPTION:
#
#   Evaluate C expressions at the command-line. Generates a main function
#   to contain the given expressions, then compiles and runs the resultant
#   binary.
#
# USAGE:
#
#   ceval [expressions]
#

require 'colorize'
require 'pathname'
require 'english'

# Headers to include in the generated file.
C_HEADERS = ['stdio.h', 'stdlib.h', 'assert.h', 'math.h', 'string.h']

# Map error codes to their name and a description.
C_ERRORS =
  if /darwin/ =~ RUBY_PLATFORM then {
    # OSX/BSD-errors declared in 'sys/errno.h'
    1  => ['EPERM', 'Operation not permitted'],
    2  => ['ENOENT', 'No such file or directory'],
    3  => ['ESRCH', 'No such process'],
    4  => ['EINTR', 'Interrupted system call'],
    5  => ['EIO', 'Input/output error'],
    # Both assert and ENXIO return (6).
    6  => ['ASSERT||ENXIO', 'Assertion failed or device not configured'],
    7  => ['E2BIG', 'Argument list too long'],
    8  => ['ENOEXEC', 'Exec format error'],
    9  => ['EBADF', 'Bad file descriptor'],
    10 => ['ECHILD', 'No child processes'],
    11 => ['EDEADLK', 'Resource deadlock avoided'],
    12 => ['ENOMEM', 'Cannot allocate memory'],
    13 => ['EACCES', 'Permission denied'],
    14 => ['EFAULT', 'Bad address'],
    15 => ['ENOTBLK', 'Block device required'],
    16 => ['EBUSY', 'Device / Resource busy'],
    17 => ['EEXIST', 'File exists'],
    18 => ['EXDEV', 'Cross-device link'],
    19 => ['ENODEV', 'Operation not supported by device'],
    20 => ['ENOTDIR', 'Not a directory'],
    21 => ['EISDIR', 'Is a directory'],
    22 => ['EINVAL', 'Invalid argument'],
    23 => ['ENFILE', 'Too many open files in system'],
    24 => ['EMFILE', 'Too many open files'],
    25 => ['ENOTTY', 'Inappropriate ioctl for device'],
    26 => ['ETXTBSY', 'Text file busy'],
    27 => ['EFBIG', 'File too large'],
    28 => ['ENOSPC', 'No space left on device'],
    29 => ['ESPIPE', 'Illegal seek'],
    30 => ['EROFS', 'Read-only file system'],
    31 => ['EMLINK', 'Too many links'],
    32 => ['EPIPE', 'Broken pipe'],
    33 => ['EDOM', 'Numerical argument out of domain'],
    34 => ['ERANGE', 'Result too large'],
    35 => ['EAGAIN', 'Resource temporarily unavailable'],
    36 => ['EINPROGRESS', 'Operation now in progress'],
    37 => ['EALREADY', 'Operation already in progress'],
    38 => ['ENOTSOCK', 'Socket operation on non-socket'],
    39 => ['EDESTADDRREQ', 'Destination address required'],
    40 => ['EMSGSIZE', 'Message too long'],
    41 => ['EPROTOTYPE', 'Protocol wrong type for socket'],
    42 => ['ENOPROTOOPT', 'Protocol not available'],
    43 => ['EPROTONOSUPPORT', 'Protocol not supported'],
    44 => ['ESOCKTNOSUPPORT', 'Socket type not supported'],
    45 => ['ENOTSUP', 'Operation not supported'],
    46 => ['EPFNOSUPPORT', 'Protocol family not supported'],
    47 => ['EAFNOSUPPORT', 'Address family not supported by protocol family'],
    48 => ['EADDRINUSE', 'Address already in use'],
    49 => ['EADDRNOTAVAIL', 'cannot assign requested address'],
    50 => ['ENETDOWN', 'Network is down'],
    51 => ['ENETUNREACH', 'Network is unreachable'],
    52 => ['ENETRESET', 'Network dropped connection on reset'],
    53 => ['ECONNABORTED', 'Software caused connection abort'],
    54 => ['ECONNRESET', 'Connection reset by peer'],
    55 => ['ENOBUFS', 'No buffer space available'],
    56 => ['EISCONN', 'Socket is already connected'],
    57 => ['ENOTCONN', 'Socket is not connected'],
    58 => ['ESHUTDOWN', 'cannot send after socket shutdown'],
    59 => ['ETOOMANYREFS', 'Too many references: cannot splice'],
    60 => ['ETIMEDOUT', 'Operation timed out'],
    61 => ['ECONNREFUSED', 'Connection refused'],
    62 => ['ELOOP', 'Too many levels of symbolic links'],
    63 => ['ENAMETOOLONG', 'File name too long'],
    64 => ['EHOSTDOWN', 'Host is down'],
    65 => ['EHOSTUNREACH', 'No route to host'],
    66 => ['ENOTEMPTY', 'Directory not empty'],
    67 => ['EPROCLIM', 'Too many processes'],
    68 => ['EUSERS', 'Too many users'],
    69 => ['EDQUOT', 'Disc quota exceeded'],
    70 => ['ESTALE', 'Stale NFS file handle'],
    71 => ['EREMOTE', 'Too many levels of remote in path'],
    72 => ['EBADRPC', 'RPC struct is bad'],
    73 => ['ERPCMISMATCH', 'RPC version wrong'],
    74 => ['EPROGUNAVAIL', 'RPC prog. not avail'],
    75 => ['EPROGMISMATCH', 'Program version wrong'],
    76 => ['EPROCUNAVAIL', 'Bad procedure for program'],
    77 => ['ENOLCK', 'No locks available'],
    78 => ['ENOSYS', 'Function not implemented'],
    79 => ['EFTYPE', 'Inappropriate file type or format'],
    80 => ['EAUTH', 'Authentication error'],
    81 => ['ENEEDAUTH', 'Need authenticator'],
    82 => ['EPWROFF', 'Device power is off'],
    83 => ['EDEVERR', 'Device error, e.g. paper out'],
    84 => ['EOVERFLOW', 'Value too large to be stored in data type'],
    85 => ['EBADEXEC', 'Bad executable'],
    86 => ['EBADARCH', 'Bad CPU type in executable'],
    87 => ['ESHLIBVERS', 'Shared library version mismatch'],
    88 => ['EBADMACHO', 'Malformed Macho file'],
    89 => ['ECANCELED', 'Operation canceled'],
    90 => ['EIDRM', 'Identifier removed'],
    91 => ['ENOMSG', 'No message of desired type'],
    92 => ['EILSEQ', 'Illegal byte sequence'],
    93 => ['ENOATTR', 'Attribute not found'],
    94 => ['EBADMSG', 'Bad message'],
    95 => ['EMULTIHOP', 'Reserved'],
    96 => ['ENODATA', 'No message available on STREAM'],
    97 => ['ENOLINK', 'Reserved'],
    98 => ['ENOSR', 'No STREAM resources'],
    99 => ['ENOSTR', 'Not a STREAM'],
    100 => ['EPROTO', 'Protocol error'],
    101 => ['ETIME', 'STREAM ioctl timeout'],
    102 => ['EOPNOTSUPP', 'Operation not supported on socket'],
    103 => ['ENOPOLICY', 'No such policy registered'],
    104 => ['ENOTRECOVERABLE', 'State not recoverable'],
    105 => ['EOWNERDEAD', 'Previous owner died'],
    106 => ['EQFULL', 'Interface output queue is full'],
    106 => ['ELAST', 'Must be equal largest errno']
  }
  else {
    # POSIX-standard codes. See 'sysexits.h'
    1  => ['ERROR', 'invalid operation'],
    6  => ['ASSERT', 'assertion failure'],
    64 => ['EX_USAGE', 'command line usage error'],
    65 => ['EX_DATAERR', 'data format error'],
    66 => ['EX_NOINPUT', 'cannot open input'],
    67 => ['EX_NOUSER', 'addressee unknown'],
    68 => ['EX_NOHOST', 'host name unknown'],
    69 => ['EX_UNAVAILABLE', 'service unavailable'],
    70 => ['EX_SOFTWARE', 'internal software error'],
    71 => ['EX_OSERR', 'system error (e.g., cannot fork)'],
    72 => ['EX_OSFILE', 'critical OS file missing'],
    73 => ['EX_CANTCREAT', 'cannot create (user) output file'],
    74 => ['EX_IOERR', 'input/output error'],
    75 => ['EX_TEMPFAIL', 'temp failure; user is invited to retry'],
    76 => ['EX_PROTOCOL', 'remote error in protocol'],
    77 => ['EX_NOPERM', 'permission denied'],
    78 => ['EX_CONFIG', 'configuration error']
  }
  end

def print_usage
  puts <<-EOF
ceval: Evaluate C expressions at the command-line.

Usage:
  ceval [expressions...]   Evaluate the given C expressions.

Notes:
  * Special characters must be double-escaped when entering
    expressions at the shell.

EOF
end

# Create a C source file, using STR as the body expressions in MAIN.
def string_to_src(str)
  headers = C_HEADERS.map { |s| "#include <#{s}>\n" }.join
  "#{headers} int main(){ #{str}; }"
end

# Create a temporary file.
def mk_tmp_file
  tmp = (ENV['TMPDIR'] || '/tmp/').strip
  `mktemp #{tmp}ceval.XXXX`.strip
end

# Compile a string as a C program with clang.
def clang_compile(src, dest)
  cc = (ENV['CC'] || `which clang` || `which gcc` || `which cc`).strip
  # Perform compilation
  IO.popen([cc, '-xc', '-o', dest, '-'], 'r+') do |h|
    h.puts src
    h.close_write
  end
  `chmod +x #{dest}` if $CHILD_STATUS.success?
end

if __FILE__ == $PROGRAM_NAME
  print_usage and exit 1 if ARGV.empty?

  src = string_to_src(ARGV.join ' ')
  binary = mk_tmp_file
  clang_compile src, binary
  abort 'Evaluation failed.'.red unless File.exists? binary
  system(binary)
  puts

  # Show error information if evaluation returned non-zero.
  code = $CHILD_STATUS.to_i
  exit if code == 0
  err, desc = C_ERRORS[code] || ['UNKNOWN', 'unknown error']
  puts "! #{err} (#{code}) - #{desc}".red
  exit code
end

# Local Variables:
# mode: ruby
# End:
